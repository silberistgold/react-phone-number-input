{"version":3,"sources":["../source/Input.js"],"names":["all_countries","default_dictionary","International","item","code","name","push","toUpperCase","FlagComponent","countryCode","flagsPath","toLowerCase","Input","props","countries","value","dictionary","international","internationalIcon","flags","country","normalize_country_code","should_add_international_option","state","country_code","value_property","get_input_value_depending_on_the_country_selected","select_options","using_custom_country_names","label","icon","get_country_option_icon","String","prototype","localeCompare","sort","a","b","unshift","undefined","metadata","convertToNational","parsed","input_value","phone","format","text","onCountryChange","setState","length","new_props","new_country","indexOf","set_country","saveOnIcons","showCountrySelect","nativeExpanded","disabled","autoComplete","selectTabIndex","selectMaxItems","selectAriaLabel","selectCloseAriaLabel","inputTabIndex","style","selectStyle","inputStyle","className","inputClassName","error","indicateInvalid","SelectComponent","selectComponent","InputComponent","inputComponent","flagComponent","input_props","tabIndex","country_select_is_shown","can_change_country","store_select_instance","country_select_toggled","on_country_select_tab_out","store_input_instance","on_change","on_blur","parse_character","on_key_down","propTypes","string","onChange","func","isRequired","onBlur","onKeyDown","bool","oneOfType","objectOf","arrayOf","element","number","object","shape","country_phone_code_to_countries","defaultProps","focus","previous_country_code","set_country_code_value","strip_country_phone_code","slice","national_number","parse_partial_number","setTimeout","character","could_phone_number_belong_to_country","input_text","formatter","input","template","is_selectable_country","available_country_code","findDOMNode","event","keyCode","select","toggle","changed_country","e164","_event","target","stopPropagation","preventDefault","is_shown","instance","partial_national_number","createElement","properties","phone_number","phone_number_digits","country_phone_code","possible_country_phone_code","substring","formatted_number","trim","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAIA;;;;AAEA;;;;AACA;;;;;;AAEA;AACA,IAAMA,gBAAgB,EAAtB;;AAEA;;;AAVA;AACA;AAUA,IAAMC,qBACN;AACCC,gBAAe;;AAGhB;AAJA,CADA,C;;;;;AAMA,gLACA;AAAA,MADWC,IACX;;AAAA,2CACsBA,IADtB;AAAA,MACQC,IADR;AAAA,MACcC,IADd;;AAGCL,gBAAcM,IAAd,CAAmBF,KAAKG,WAAL,EAAnB;AACAN,qBAAmBG,KAAKG,WAAL,EAAnB,IAAyCF,IAAzC;AACA;;AAED;;;;;;;;;;;;;;;;AACA,IAAMG,gBAAgB,SAAhBA,aAAgB;AAAA,KAAGC,WAAH,QAAGA,WAAH;AAAA,KAAgBC,SAAhB,QAAgBA,SAAhB;AAAA,QACrB;AACC,OAAKD,WADN;AAEC,aAAU,gCAFX;AAGC,YAAQC,SAAR,GAAoBD,YAAYE,WAAZ,EAApB,SAHD,GADqB;AAAA,CAAtB;;AAOA;AACA;;IACqBC,K;;;AAwNpB,gBAAYC,KAAZ,EACA;AAAA;;AAAA,kIACOA,KADP;;AAAA;;AAAA,oBAYG,MAAKA,KAZR;AAAA,MAKEC,SALF,eAKEA,SALF;AAAA,MAMEC,KANF,eAMEA,KANF;AAAA,MAOEC,UAPF,eAOEA,UAPF;AAAA,MAQEC,aARF,eAQEA,aARF;AAAA,MASEC,iBATF,eASEA,iBATF;AAAA,MAUEC,KAVF,eAUEA,KAVF;AAAA,MAcOC,OAdP,GAcmB,MAAKP,KAdxB,CAcOO,OAdP;;AAgBC;;AACAA,YAAUC,uBAAuBD,OAAvB,EAAgCJ,UAAhC,CAAV;;AAEA;AACA;AACA,MAAID,SAASA,MAAM,CAAN,MAAa,GAA1B,EACA;AACC;AACAK,aAAU,6BAAML,KAAN,EAAaK,OAAvB;AACA;;AAED;AACA;AACA,MAAI,CAACE,gCAAgC,MAAKT,KAArC,CAAD,IAAgD,CAACO,OAArD,EACA;AACCA,aAAUN,UAAU,CAAV,CAAV;AACA;;AAED;AACA,QAAKS,KAAL,CAAWC,YAAX,GAA0BJ,OAA1B;;AAEA;AACA,MAAIL,KAAJ,EACA;AACC;AACA;AACA;AACA;AACA;AACA,SAAKQ,KAAL,CAAWE,cAAX,GAA4BV,KAA5B;AACA;AACA;AACA;AACA,SAAKQ,KAAL,CAAWR,KAAX,GAAmB,MAAKW,iDAAL,CAAuDX,KAAvD,EAA8DK,OAA9D,CAAnB;AACA;;AAED;AACA,QAAKO,cAAL,GAAsB,EAAtB;;AAEA;AACA,MAAIC,6BAA6B,KAAjC;;AAEA;AA1DD;AAAA;AAAA;;AAAA;AA2DC,oDAA2Bd,SAA3B,iHACA;AAAA,QADWU,YACX;;AACC,QAAIR,WAAWQ,YAAX,CAAJ,EACA;AACCI,kCAA6B,IAA7B;AACA;;AAED,UAAKD,cAAL,CAAoBrB,IAApB,CACC;AACAS,YAAQS,YADR;AAEAK,YAAQb,WAAWQ,YAAX,KAA4BvB,mBAAmBuB,YAAnB,CAFpC;AAGAM,WAAQC,wBAAwBP,YAAxB,EAAsC,MAAKX,KAA3C;AAHR,KADD;AAMA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmFC,MAAIe,8BAA8BI,OAAOC,SAAP,CAAiBC,aAAnD,EACA;AACC,SAAKP,cAAL,CAAoBQ,IAApB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,EAAEP,KAAF,CAAQK,aAAR,CAAsBG,EAAER,KAAxB,CAAV;AAAA,IAAzB;AACA;;AAED;AACA,MAAIP,gCAAgC,MAAKT,KAArC,CAAJ,EACA;AACC,SAAKc,cAAL,CAAoBW,OAApB,CACC;AACAT,WAAQb,WAAW,eAAX,KAA+Bf,mBAAmB,eAAnB,CADvC;AAEA6B,UAAQX,UAAU,KAAV,GAAkBoB,SAAlB,GAA8BrB;AAFtC,IADD;AAKA;AAhGF;AAiGC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;oEACkDH,K,EAAOS,Y,EACzD;AAAA,gBACyC,KAAKX,KAD9C;AAAA,OACS2B,QADT,UACSA,QADT;AAAA,OACmBC,iBADnB,UACmBA,iBADnB;;;AAGC,OAAI,CAAC1B,KAAL,EACA;AACC;AACA;;AAED;AACA,OAAIS,YAAJ,EACA;AACC;AACA;AACA,QAAIT,MAAM,CAAN,MAAa,GAAb,IAAoB0B,iBAAxB,EACA;AACC;AACA;AACA;;AAEA,SAAMC,SAAS,6BAAM3B,KAAN,EAAayB,QAAb,CAAf;;AAEA,SAAIE,OAAOtB,OAAP,KAAmBI,YAAvB,EACA;AACC,UAAMmB,cAAc,8BAAOD,OAAOE,KAAd,EAAqBpB,YAArB,EAAmC,UAAnC,EAA+CgB,QAA/C,CAApB;AACA,aAAO,KAAKK,MAAL,CAAYF,WAAZ,EAAyBnB,YAAzB,EAAuCsB,IAA9C;AACA;AACD;AACD;AACD;AACA;AApBA,QAqBK,IAAI/B,MAAM,CAAN,MAAa,GAAjB,EACL;AACC;AACA;AACA;AACA,YAAO,MAAMA,KAAb;AACA;;AAED,UAAOA,KAAP;AACA;;;yCAEsBS,Y,EACvB;AAAA,OACSuB,eADT,GAC6B,KAAKlC,KADlC,CACSkC,eADT;;;AAGC,OAAIA,eAAJ,EACA;AACCA,oBAAgBvB,YAAhB;AACA;;AAED,QAAKwB,QAAL,CAAc,EAAExB,0BAAF,EAAd;AACA;;AAED;;;AAoGA;AACA;;;AAkDA;AACA;;;AAiBA;;;AAcA;;;AAMA;;;AAiBA;AACA;AACA;AACA;;;AA0HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6BA;;;AAMA;AACA;;;;;;AAWA;uCAEA;AAAA,OACSV,SADT,GACuB,KAAKD,KAD5B,CACSC,SADT;;AAGC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAOA,UAAUmC,MAAV,GAAmB,CAA1B;AACA;;AAED;AACA;AACA;AACA;;;;4CAC0BC,S,EAC1B;AAAA,iBAC0C,KAAKrC,KAD/C;AAAA,OACSC,SADT,WACSA,SADT;AAAA,OACoBC,KADpB,WACoBA,KADpB;AAAA,OAC2BC,UAD3B,WAC2BA,UAD3B;;AAGC;;AACA,OAAII,UAAcC,uBAAuB,KAAKR,KAAL,CAAWO,OAAlC,EAA2CJ,UAA3C,CAAlB;AACA,OAAImC,cAAc9B,uBAAuB6B,UAAU9B,OAAjC,EAA0CJ,UAA1C,CAAlB;;AAEA;AACA;AACA,OAAImC,gBAAgB/B,OAApB,EACA;AACC;AACA;AACA;AACA,QAAI,CAACL,KAAL,EACA;AACC;AACA,SAAID,UAAUsC,OAAV,CAAkBD,WAAlB,MAAmC,CAAC,CAAxC,EACA;AACC;AACA,WAAKE,WAAL,CAAiBF,WAAjB,EAA8B,KAA9B;AACA;AACD;AACD;;AAED;AACA;AACA;AACA,OAAID,UAAUnC,KAAV,KAAoBA,KAAxB,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAImC,UAAUnC,KAAV,KAAoB,KAAKQ,KAAL,CAAWE,cAAnC,EACA;AACC;;AAEA;AACA,SAAID,eAAe,KAAKD,KAAL,CAAWC,YAA9B;;AAEA;AACA;AACA,SAAI0B,UAAUnC,KAAV,IAAmBmC,UAAUnC,KAAV,CAAgB,CAAhB,MAAuB,GAA9C,EACA;AACC;AACAS,qBAAe,6BAAM0B,UAAUnC,KAAhB,EAAuBK,OAAvB,IAAkCI,YAAjD;AACA;;AAED,UAAKwB,QAAL,CACC;AACAxB,gCADA;AAEAT,aAAO,KAAKW,iDAAL,CAAuDwB,UAAUnC,KAAjE,EAAwES,YAAxE,CAFP;AAGA;AACA;AACA;AACA;AACA;AACAC,sBAAgByB,UAAUnC;AAR1B,MADD;AAWA;AACD;AACD;;;2BAaD;AAAA,iBAuCG,KAAKF,KAvCR;AAAA,OAGEyC,WAHF,WAGEA,WAHF;AAAA,OAIEC,iBAJF,WAIEA,iBAJF;AAAA,OAKEC,cALF,WAKEA,cALF;AAAA,OAMEC,QANF,WAMEA,QANF;AAAA,OAOEC,YAPF,WAOEA,YAPF;AAAA,OAQEC,cARF,WAQEA,cARF;AAAA,OASEC,cATF,WASEA,cATF;AAAA,OAUEC,eAVF,WAUEA,eAVF;AAAA,OAWEC,oBAXF,WAWEA,oBAXF;AAAA,OAYEC,aAZF,WAYEA,aAZF;AAAA,OAaEC,KAbF,WAaEA,KAbF;AAAA,OAcEC,WAdF,WAcEA,WAdF;AAAA,OAeEC,UAfF,WAeEA,UAfF;AAAA,OAgBEC,SAhBF,WAgBEA,SAhBF;AAAA,OAiBEC,cAjBF,WAiBEA,cAjBF;AAAA,OAmBEC,KAnBF,WAmBEA,KAnBF;AAAA,OAoBEC,eApBF,WAoBEA,eApBF;AAAA,OAsBoBC,eAtBpB,WAsBEC,eAtBF;AAAA,OAuBoBC,cAvBpB,WAuBEC,cAvBF;AAAA,OA0BE1D,UA1BF,WA0BEA,UA1BF;AAAA,OA2BEF,SA3BF,WA2BEA,SA3BF;AAAA,OA4BEM,OA5BF,WA4BEA,OA5BF;AAAA,OA6BE2B,eA7BF,WA6BEA,eA7BF;AAAA,OA8BE5B,KA9BF,WA8BEA,KA9BF;AAAA,OA+BEwD,aA/BF,WA+BEA,aA/BF;AAAA,OAgCEjE,SAhCF,WAgCEA,SAhCF;AAAA,OAiCEO,aAjCF,WAiCEA,aAjCF;AAAA,OAkCEC,iBAlCF,WAkCEA,iBAlCF;AAAA,OAmCEuB,iBAnCF,WAmCEA,iBAnCF;AAAA,OAoCED,QApCF,WAoCEA,QApCF;AAAA,OAqCKoC,WArCL;;AAyCC;;AACA,OAAIb,aAAJ,EACA;AACCa,gBAAYC,QAAZ,GAAuBd,aAAvB;AACA;;AA7CF,gBAqDG,KAAKxC,KArDR;AAAA,OAiDER,KAjDF,UAiDEA,KAjDF;AAAA,OAkDES,YAlDF,UAkDEA,YAlDF;AAAA,OAmDEsD,uBAnDF,UAmDEA,uBAnDF;;AAuDC;AACA;AACA;AACA;AACA;;AAEA,UACC;AAAA;AAAA;AACC,YAAQd,KADT;AAEC,gBAAY,0BAAW,0BAAX,EACZ;AACC,2CAAqCK,SAASC;AAD/C,MADY,EAIZH,SAJY,CAFb;AASC;AAAA;AAAA,OAAK,WAAU,+BAAf;AAGGZ,0BAAqB,KAAKwB,kBAAL,EAArB,IACD,8BAAC,eAAD;AACC,WAAM,KAAKC,qBADZ;AAEC,aAAQxD,YAFT;AAGC,eAAU,KAAKG,cAHhB;AAIC,gBAAW,KAAK0B,WAJjB;AAKC,gBAAWI,QALZ;AAMC,gBAAW,KAAKwB,sBANjB;AAOC,gBAAW,KAAKC,yBAPjB;AAQC,sBAAiB1B,cARlB;AASC,wBATD;AAUC,+BAVD;AAWC,gBAAWI,cAXZ;AAYC,mBAZD;AAaC,gBAAWD,cAbZ;AAcC,0BAAqB,KAdtB;AAeC,mBAAcL,WAff;AAgBC,YAAOsB,YAAYvE,IAAZ,GAAsBuE,YAAYvE,IAAlC,iBAAoDkC,SAhB5D;AAiBC,iBAAYsB,eAjBb;AAkBC,sBAAiBC,oBAlBlB;AAmBC,aAAQG,WAnBT;AAoBC,iBAAY,0BAAW,mCAAX,EACZ;AACC,6DAAuDT;AADxD,OADY,CApBb;AAwBC,sBAAiBY,cAxBlB,GAJF;AAgCG,MAACU,uBAAD,IACD,8BAAC,cAAD;AACC,YAAK;AADN,QAEMF,WAFN;AAGC,WAAM,KAAKO,oBAHZ;AAIC,aAAQpE,KAJT;AAKC,gBAAW,KAAKqE,SALjB;AAMC,cAAS,KAAKC,OANf;AAOC,gBAAW5B,QAPZ;AAQC,oBAAeC,YARhB;AASC,aAAQ,KAAK4B,eATd;AAUC,cAAS,KAAKzC,MAVf;AAWC,iBAAY,KAAK0C,WAXlB;AAYC,aAAQrB,UAZT;AAaC,iBAAY,0BAEX,aAFW,EAGX,qBAHW,EAIX,mBAJW,EAKX;AACC,qCAAgCG,SAASC,eAD1C;AAEC,sCAAgCb;AAFjC,OALW,EASX,iCATW,EAUXW,cAVW,CAbb;AAjCF,KATD;AAuEGC,aAASC,eAAT,IACD;AAAA;AAAA,OAAK,WAAY,0BAAW,mBAAX,EAAgC,iCAAhC,CAAjB;AACGD;AADH;AAxEF,IADD;AA+EA;;;;;AAGF;AACA;AACA;AACA;AACA;AACA;;;AAl/BqBzD,K,CAEb4E,S,GACP;AACC;AACA;AACA;AACAzE,QAAQ,oBAAU0E,MAJnB;;AAMC;AACA;AACAC,WAAW,oBAAUC,IAAV,CAAeC,UAR3B;;AAUC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,SAAS,oBAAUF,IAlBpB;;AAoBC;AACA;AACAG,YAAY,oBAAUH,IAtBvB;;AAwBC;AACA;AACAlC,WAAW,oBAAUsC,IAAV,CAAeH,UA1B3B;;AA4BC;AACAvB,QAAQ,oBAAU2B,SAAV,CAAoB,CAAC,oBAAUP,MAAX,EAAmB,oBAAUM,IAA7B,CAApB,CA7BT;;AA+BC;AACA;AACAzB,kBAAkB,oBAAUyB,IAjC7B;;AAmCC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArC,eAAe,oBAAU+B,MAAV,CAAiBG,UAhDjC;;AAkDC;AACA;AACA;AACAxE,UAAU,oBAAUqE,MArDrB;;AAuDC;AACA;AACA;AACA;AACA;AACA1C,kBAAkB,oBAAU4C,IA5D7B;;AA8DC;AACA;AACA3E,aAAa,oBAAUiF,QAAV,CAAmB,oBAAUR,MAA7B,EAAqCG,UAhEnD;;AAkEC;AACA9E,YAAY,oBAAUoF,OAAV,CAAkB,oBAAUT,MAA5B,EAAoCG,UAnEjD;;AAqEC;AACAzE,QAAQ,oBAAU6E,SAAV,CACP,CACA,oBAAUD,IADV;AAEA;AACA;AACA,qBAAUE,QAAV,CAAmB,oBAAUE,OAA7B,CAJA,CADO,CAtET;;AA8EC;AACAxB,gBAAgB,oBAAUgB,IAAV,CAAeC,UA/EhC;;AAiFC;AACA;AACAlF,YAAY,oBAAU+E,MAAV,CAAiBG,UAnF9B;;AAqFC;AACApC,iBAAiB,oBAAUuC,IAAV,CAAeH,UAtFjC;;AAwFC;AACA;AACA;AACAtC,cAAc,oBAAUyC,IAAV,CAAeH,UA3F9B;;AA6FC;AACA;AACArC,oBAAoB,oBAAUwC,IAAV,CAAeH,UA/FpC;;AAiGC;AACA;AACA3E,gBAAgB,oBAAU8E,IAnG3B;;AAqGC;AACA7E,oBAAoB,oBAAUiF,OAAV,CAAkBP,UAtGvC;;AAwGC;AACA;AACA;AACAnD,oBAAoB,oBAAUsD,IAAV,CAAeH,UA3GpC;;AA6GC;AACAjC,iBAAoB,oBAAUyC,MA9G/B;;AAgHC;AACAxC,iBAAoB,oBAAUwC,MAjH/B;;AAmHC;AACA;AACArC,gBAAoB,oBAAUqC,MArH/B;;AAuHC;AACAvC,kBAAkB,oBAAU4B,MAxH7B;;AA0HC;AACA;AACA;AACA3B,uBAAuB,oBAAU2B,MA7HlC;;AA+HC;AACAzB,QAAQ,oBAAUqC,MAhInB;;AAkIC;AACApC,cAAc,oBAAUoC,MAnIzB;;AAqIC;AACAnC,aAAa,oBAAUmC,MAtIxB;;AAwIC;AACAlC,YAAY,oBAAUsB,MAzIvB;;AA2IC;AACA;AACArB,iBAAiB,oBAAUqB,MA7I5B;;AA+IC;AACAjB,kBAAkB,oBAAUmB,IAAV,CAAeC,UAhJlC;;AAkJC;AACAlB,iBAAiB,oBAAUiB,IAAV,CAAeC,UAnJjC;;AAqJC;AACApD,WAAW,oBAAU8D,KAAV,CACV;AACAC,mCAAkC,oBAAUF,MAAV,CAAiBT,UADnD;AAEA9E,aAAY,oBAAUuF,MAAV,CAAiBT;AAF7B,EADU,EAKVA;AA3JF,C;AAHoBhF,K,CAiKb4F,Y,GACP;AACC;AACA/C,WAAU,KAFX;;AAIC;AACAC,eAAc,KALf;;AAOC;AACA5C,YAAWd,aARZ;;AAUC;AACA2E,gBAAenE,aAXhB;;AAaC;AACAE,YAAW,kDAdZ;;AAgBC;AACAQ,oBACC;AAAA;AAAA,IAAK,WAAY,0BAAW,gCAAX,EAA6C,+CAA7C,CAAjB;AACC;AADD,EAlBF;;AAuBC;AACAF,aAAY,EAxBb;;AA0BC;AACAwC,iBAAgB,KA3BjB;;AA6BC;AACA;AACA;AACAF,cAAa,IAhCd;;AAkCC;AACAC,oBAAmB,IAnCpB;;AAqCC;AACA;AACA;AACA;AACA;AACA;AACAd,oBAAmB,KA3CpB;;AA6CC;AACA+B,kCA9CD;;AAgDC;AACAE;AAjDD,C;;;;;MAoDAnD,K,GAAQ,E;;MAqKR8B,W,GAAc,UAAC7B,YAAD,EAAeiF,KAAf,EACd;AAAA,gBACyC,OAAK5F,KAD9C;AAAA,MACS2B,QADT,WACSA,QADT;AAAA,MACmBC,iBADnB,WACmBA,iBADnB;;AAGC;;AACA,MAAMiE,wBAAwB,OAAKnF,KAAL,CAAWC,YAAzC;;AAEA,SAAKmF,sBAAL,CAA4BnF,YAA5B;;AAEA;AACA;;AATD,MAWOT,KAXP,GAWiB,OAAKQ,KAXtB,CAWOR,KAXP;;AAaC;;AACA,MAAIA,KAAJ,EACA;AACC;AACA,OAAIS,YAAJ,EACA;AACC;AACA;AACA;AACA;AACA,QAAIT,MAAM,CAAN,MAAa,GAAjB,EACA;AACC;AACA;AACA;AACAA,aAAQ6F,yBAAyB7F,KAAzB,EAAgCyB,QAAhC,CAAR;;AAEA;AACA,SAAIzB,MAAM,CAAN,MAAa,GAAjB,EACA;AACCA,cAAQA,MAAM8F,KAAN,CAAY,IAAI5D,MAAhB,CAAR;AACA;;AAED;AACA,SAAI,CAACR,iBAAL,EACA;AACC1B,oBAAY,oCAAaS,YAAb,CAAZ,GAAyCT,KAAzC;AACA;AACD;AACD;;AAED;AACA,OAAI2F,yBAAyB,CAAClF,YAA9B,EACA;AACC;AACA,QAAIT,MAAM,CAAN,MAAa,GAAjB,EACA;AACC;AACA;AACA;AACA;AACA;AACA,SAAM+F,kBAAkBC,qBAAqBhG,KAArB,EAA4B2F,qBAA5B,EAAmDlE,QAAnD,EAA6DsE,eAArF;AACA/F,aAAQ,8BAAO+F,eAAP,EAAwBJ,qBAAxB,EAA+C,yBAA/C,EAA0ElE,QAA1E,CAAR;AACA;AACD;;AAED;AACA;AACA;AACA;AACA,UAAK4C,SAAL,CAAerE,KAAf,EAAsBS,YAAtB,EAAoC,IAApC;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAIiF,UAAU,KAAd,EACA;AACCO,cAAW,OAAKP,KAAhB,EAAuB,CAAvB;AACA;AACD,E;;MAIDnB,e,GAAkB,UAAC2B,SAAD,EAAYlG,KAAZ,EAClB;AAAA,MACSD,SADT,GACuB,OAAKD,KAD5B,CACSC,SADT;;;AAGC,MAAImG,cAAc,GAAlB,EACA;AACC;AACA,OAAI,CAAClG,KAAL,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAOkG,SAAP;AACA;AACD;AACD;AACA;AACA;AArBA,OAsBK,IAAI,yBAAOA,SAAP,CAAJ,EACL;AAAA,QACSzE,QADT,GACsB,OAAK3B,KAD3B,CACS2B,QADT;AAAA,QAEShB,YAFT,GAE0B,OAAKD,KAF/B,CAESC,YAFT;;AAIC;AACA;AACA;AACA;AACA;;AAEA,QAAI,CAACF,gCAAgC,OAAKT,KAArC,CAAD,IAAgDE,KAAhD,IAAyDA,MAAM,CAAN,MAAa,GAA1E,EACA;AACC,SAAI,CAACmG,qCAAqCnG,QAAQ,yBAAOkG,SAAP,CAA7C,EAAgEzF,YAAhE,EAA8EgB,QAA9E,CAAL,EACA;AACC;AACA;AACD;;AAED,WAAO,yBAAOyE,SAAP,CAAP;AACA;AACD,E;;MAIDpE,M,GAAS,UAACsE,UAAD,EACT;AAAA,MADsB3F,YACtB,uEADqC,OAAKD,KAAL,CAAWC,YAChD;AAAA,MACSgB,QADT,GACsB,OAAK3B,KAD3B,CACS2B,QADT;;AAGC;;AACA,MAAM4E,YAAY,kCAAgB5F,YAAhB,EAA8BgB,QAA9B,CAAlB;;AAEA;AACA,SAAK4E,SAAL,GAAiBA,SAAjB;;AAEA;AACA,MAAMtE,OAAOsE,UAAUC,KAAV,CAAgBF,UAAhB,CAAb;;AAEA,SAAO,EAAErE,UAAF,EAAQwE,UAAUF,UAAUE,QAA5B,EAAP;AACA,E;;MAGDC,qB,GAAwB,UAAC/F,YAAD,EACxB;AAAA,MACSV,SADT,GACuB,OAAKD,KAD5B,CACSC,SADT;AAAA;AAAA;AAAA;;AAAA;;AAGC,oDAAqCA,SAArC,iHACA;AAAA,QADW0G,sBACX;;AACC,QAAIA,2BAA2BhG,YAA/B,EACA;AACC,YAAO,IAAP;AACA;AACD;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUC,E;;MAGDiF,K,GAAQ,YACR;AACC,qBAASgB,WAAT,CAAqB,OAAKJ,KAA1B,EAAiCZ,KAAjC;AACA,E;;MAGDlB,W,GAAc,UAACmC,KAAD,EACd;AAAA,MACS5B,SADT,GACuB,OAAKjF,KAD5B,CACSiF,SADT;;AAGC;;AACA,MAAI4B,MAAMC,OAAN,KAAkB,EAAtB,EACA;AACC,UAAKC,MAAL,CAAYC,MAAZ;AACA;;AAED,MAAI/B,SAAJ,EACA;AACCA,aAAU4B,KAAV;AACA;AACD,E;;MAMDtC,S,GAAY,UAACrE,KAAD,EACZ;AAAA,MADoBS,YACpB,uEADmC,OAAKD,KAAL,CAAWC,YAC9C;AAAA,MAD4DsG,eAC5D,uEAD8E,KAC9E;AAAA,gBACgC,OAAKjH,KADrC;AAAA,MACS2B,QADT,WACSA,QADT;AAAA,MACmBkD,QADnB,WACmBA,QADnB;;AAGC;;AACA,MAAI,CAAC3E,KAAL,EACA;AACC,UAAO,OAAKiC,QAAL,CACN;AACA;AACA;AACA;AACA;AACA;AACAjC,gBANA;AAOA;AACA;AACA;AACA;AACA;AACAU,oBAAgBV;AAZhB,IADM;AAeP;AACA;AAAA,WAAM2E,SAAS3E,KAAT,CAAN;AAAA,IAhBO,CAAP;AAiBA;;AAED;AACA,MAAIA,MAAM,CAAN,MAAa,GAAjB,EACA;AACC;AACA;AACA;AACA,OAAIA,MAAMkC,MAAN,KAAiB,CAArB,EACA;AACC;AACA;AACA,QAAI,CAAC6E,eAAD,IAAoBxG,gCAAgC,OAAKT,KAArC,CAAxB,EACA;AACCW,oBAAee,SAAf;AACA,YAAKoE,sBAAL,CAA4BnF,YAA5B;AACA;AACD,IATD,MAWA;AACC;AACA;AACA;AACA;AACA,QAAI,CAACsG,eAAD,IACH,OAAKV,SAAL,CAAehG,OADZ,IAEH,OAAKgG,SAAL,CAAehG,OAAf,KAA2B,KAFxB,IAGH,OAAKmG,qBAAL,CAA2B,OAAKH,SAAL,CAAehG,OAA1C,CAHD,EAIA;AACCI,oBAAe,OAAK4F,SAAL,CAAehG,OAA9B;AACA,YAAKuF,sBAAL,CAA4BnF,YAA5B;AACA;AACD;AACA;AACA;AAVA,SAWK,IAAI,CAACsG,eAAD,IACRxG,gCAAgC,OAAKT,KAArC,CADQ,IAERW,YAFQ,IAGRT,MAAMqC,OAAN,CAAc,oCAAa5B,YAAb,MAA+B,IAAIyB,MAAjD,CAHI,EAIL;AACCzB,qBAAee,SAAf;AACA,aAAKoE,sBAAL,CAA4BnF,YAA5B;AACA;AACD;AACD;AACD;AACA;AACA;AA5CA,OA6CK,IAAI,CAACA,YAAL,EACL;AACCT,YAAQ,MAAMA,KAAd;AACA;;AAED;AACA;AACA;AACA;AACA;AACA,MAAIU,uBAAJ;;AAEA;AACA,MAAIV,UAAU,GAAd,EACA;AACCU,oBAAiBc,SAAjB;AACA;AACD;AACA;AALA,OAMK,IAAIf,gBAAgBT,MAAM,CAAN,MAAa,GAA7B,IAAoC,EAAEA,MAAMqC,OAAN,OAAkB,oCAAa5B,YAAb,CAAlB,MAAoD,CAApD,IAAyDT,MAAMkC,MAAN,GAAe,OAAI,oCAAazB,YAAb,CAAJ,EAAiCyB,MAA3G,CAAxC,EACL;AACCxB,qBAAiBc,SAAjB;AACA;AACD;AAJK,QAML;AACC;AACAd,sBAAiBsG,KAAKhH,KAAL,EAAYS,YAAZ,EAA0BgB,QAA1B,CAAjB;AACA;;AAED,SAAKQ,QAAL,CACC;AACA;AACA;AACA;AACA;AACA;AACAjC,eANA;AAOA;AACA;AACA;AACA;AACA;AACAU;AAZA,GADD;AAeA;AACA;AAAA,UAAMiE,SAASjE,cAAT,CAAN;AAAA,GAhBA;AAiBA,E;;MAUD4D,O,GAAU,UAACqC,KAAD,EACV;AAAA,MACS7B,MADT,GACoB,OAAKhF,KADzB,CACSgF,MADT;AAAA,MAESpE,cAFT,GAE4B,OAAKF,KAFjC,CAESE,cAFT;;;AAIC,MAAI,CAACoE,MAAL,EACA;AACC;AACA;;AAED,MAAMmC,oCAEFN,KAFE;AAGLO,sCAEIP,MAAMO,MAFV;AAGClH,WAAOU;AAHR;;AAOD;AACA;AAXM,IAAN,CAYAuG,OAAOE,eAAP,GAAyBR,MAAMQ,eAA/B;AACAF,SAAOG,cAAP,GAAyBT,MAAMS,cAA/B;;AAEA,SAAOtC,OAAOmC,MAAP,CAAP;AACA,E;;MAGD/C,sB,GAAyB,UAACmD,QAAD,EACzB;AACC,SAAKpF,QAAL,CAAc,EAAE8B,yBAAyBsD,QAA3B,EAAd;AACA,E;;MAIDlD,yB,GAA4B,UAACwC,KAAD,EAC5B;AACCA,QAAMS,cAAN;;AAEA;AACA;AACA;AACAnB,aAAW,OAAKP,KAAhB,EAAuB,CAAvB;AACA,E;;MA0FDzB,qB,GAAwB,UAACqD,QAAD,EACxB;AACC,SAAKT,MAAL,GAAcS,QAAd;AACA,E;;MAEDlD,oB,GAAuB,UAACkD,QAAD,EACvB;AACC,SAAKhB,KAAL,GAAagB,QAAb;AACA,E;;;kBA31BmBzH,K;AAm/BrB,SAASmG,oBAAT,CAA8BhG,KAA9B,EAAqCS,YAArC,EAAmDgB,QAAnD,EACA;AACC;AACA,KAAM4E,YAAY,kCAAgB5F,YAAhB,EAA8BgB,QAA9B,CAAlB;;AAEA;AACA4E,WAAUC,KAAV,CAAgBtG,KAAhB;;AAEA;AACA;AACA,QAAOqG,SAAP;AACA;;AAED;AACA,SAASW,IAAT,CAAchH,KAAd,EAAqBS,YAArB,EAAmCgB,QAAnC,EACA;AACC,KAAI,CAACzB,KAAL,EACA;AACC,SAAOwB,SAAP;AACA;;AAED;AACA,KAAIxB,MAAM,CAAN,MAAa,GAAjB,EACA;AACC;AACA,MAAIA,MAAMkC,MAAN,KAAiB,CAArB,EACA;AACC,UAAOV,SAAP;AACA;;AAED;AACA,SAAOxB,KAAP;AACA;;AAED;AACA,KAAI,CAACS,YAAL,EACA;AACC,SAAOe,SAAP;AACA;;AAED;;AAEA,KAAM+F,0BAA0BvB,qBAAqBhG,KAArB,EAA4BS,YAA5B,EAA0CsF,eAA1E;;AAEA,KAAI,CAACwB,uBAAL,EACA;AACC,SAAO/F,SAAP;AACA;;AAED;AACA,QAAO,8BAAO+F,uBAAP,EAAgC9G,YAAhC,EAA8C,yBAA9C,EAAyEgB,QAAzE,CAAP;AACA;;AAED;AACA,SAAST,uBAAT,CAAiCtB,WAAjC,SACA;AAAA,KADgDU,KAChD,SADgDA,KAChD;AAAA,KADuDT,SACvD,SADuDA,SACvD;AAAA,KADkEiE,aAClE,SADkEA,aAClE;;AACC,KAAIxD,UAAU,KAAd,EACA;AACC,SAAOoB,SAAP;AACA;;AAED,KAAIpB,SAASA,MAAMV,WAAN,CAAb,EACA;AACC,SAAOU,MAAMV,WAAN,CAAP;AACA;;AAED,QAAO,gBAAM8H,aAAN,CAAoB5D,aAApB,EAAmC,EAAElE,wBAAF,EAAeC,oBAAf,EAAnC,CAAP;AACA;;AAED;AACA,SAASY,+BAAT,CAAyCkH,UAAzC,EACA;AAAA,KACS1H,SADT,GACsC0H,UADtC,CACS1H,SADT;AAAA,KACoBG,aADpB,GACsCuH,UADtC,CACoBvH,aADpB;;AAGC;;AACA,KAAIA,kBAAkBsB,SAAtB,EACA;AACC,SAAOtB,aAAP;AACA;;AAED;AACA;AACA,KAAIH,UAAUmC,MAAV,KAAqB,CAAzB,EACA;AACC,SAAO,IAAP;AACA;;AAED;AACA;AACA;AACA,KAAInC,UAAUmC,MAAV,KAAqB,CAAzB,EACA;AACC,SAAO,KAAP;AACA;;AAED;AACA,QAAO,IAAP;AACA;;AAED;AACA,SAASiE,oCAAT,CAA8CuB,YAA9C,EAA4DjH,YAA5D,EAA0EgB,QAA1E,EACA;AACC;AACA,KAAMkG,sBAAsBD,aAAa5B,KAAb,CAAmB,IAAI5D,MAAvB,CAA5B;;AAFD;AAAA;AAAA;;AAAA;AAIC,mDAAiC,oBAAYT,SAAS+D,+BAArB,CAAjC,iHACA;AAAA,OADWoC,kBACX;;AACC,OAAMC,8BAA8BF,oBAAoBG,SAApB,CAA8B,CAA9B,EAAiCF,mBAAmB1F,MAApD,CAApC;AACA,OAAI0F,mBAAmBvF,OAAnB,CAA2BwF,2BAA3B,MAA4D,CAAhE,EACA;AACC;AACA;AACA,QAAIpG,SAAS+D,+BAAT,CAAyCoC,kBAAzC,EAA6DvF,OAA7D,CAAqE5B,YAArE,KAAsF,CAA1F,EACA;AACC,YAAO,IAAP;AACA;AACD;AACD;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBC;;AAED;AACA;AACA,SAASoF,wBAAT,CAAkCkC,gBAAlC,EAAoDtG,QAApD,EACA;AACC,KAAI,CAACsG,gBAAD,IAAqBA,iBAAiB,CAAjB,MAAwB,GAA7C,IAAoDA,qBAAqB,GAA7E,EACA;AACC,SAAOA,gBAAP;AACA;;AAJF;AAAA;AAAA;;AAAA;AAMC,mDAAiC,oBAAYtG,SAAS+D,+BAArB,CAAjC,iHACA;AAAA,OADWoC,kBACX;;AACC,OAAIG,iBAAiB1F,OAAjB,CAAyBuF,kBAAzB,MAAiD,IAAI1F,MAAzD,EACA;AACC,WAAO6F,iBAAiBjC,KAAjB,CAAuB,IAAI5D,MAAJ,GAAa0F,mBAAmB1F,MAAvD,EAA+D8F,IAA/D,EAAP;AACA;AACD;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcC,QAAOD,gBAAP;AACA;;AAED;AACA,SAASzH,sBAAT,CAAgCD,OAAhC,EAAyCJ,UAAzC,EACA;AACC;AACA,KAAII,YAAY,EAAhB,EACA;AACCA,YAAUmB,SAAV;AACA;;AAED;AACA,KAAInB,YAAYmB,SAAZ,IAAyBnB,YAAY,IAAzC,EACA;AACC,SAAOA,OAAP;AACA;;AAED;AACA,KAAIJ,WAAWI,OAAX,KAAuBnB,mBAAmBmB,OAAnB,CAA3B,EACA;AACC,SAAOA,OAAP;AACA;;AAED,OAAM,IAAI4H,KAAJ,wBAA+B5H,OAA/B,OAAN;AACA","file":"Input.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport { as_you_type, parse, format, getPhoneCode, DIGITS } from 'libphonenumber-js'\nimport { ReactInput } from 'input-format'\nimport classNames from 'classnames'\n\n// Could have been `import { Select } from 'react-responsive-ui'`\n// but in that case Webpack bundles the whole `react-responsive-ui` package.\nimport Select from 'react-responsive-ui/commonjs/Select'\n\nimport country_names from './countries.json'\nimport InternationalIcon from './InternationalIcon'\n\n// A list of all country codes\nconst all_countries = []\n\n// Country code to country name map\nconst default_dictionary =\n{\n\tInternational: 'International'\n}\n\n// Populate `all_countries` and `default_dictionary`\nfor (const item of country_names)\n{\n\tconst [code, name] = item\n\n\tall_countries.push(code.toUpperCase())\n\tdefault_dictionary[code.toUpperCase()] = name\n}\n\n// Default country flag icon\nconst FlagComponent = ({ countryCode, flagsPath }) => (\n\t<img\n\t\talt={countryCode}\n\t\tclassName=\"react-phone-number-input__icon\"\n\t\tsrc={`${flagsPath}${countryCode.toLowerCase()}.svg`}/>\n)\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\nexport default class Input extends Component\n{\n\tstatic propTypes =\n\t{\n\t\t// Phone number `value`.\n\t\t// Is a plaintext international phone number\n\t\t// (e.g. \"+12223333333\" for USA)\n\t\tvalue : PropTypes.string,\n\n\t\t// This handler is called each time\n\t\t// the phone number <input/> changes its textual value.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t\t// not the formatted one.\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t// and this component passes this `onBlur` property further to\n\t\t// `input-format`'s `<ReactInput/>` which then modifies this `onBlur` handler\n\t\t// to return the correct parsed `value` so that it all works with `redux-form`.\n\t\tonBlur : PropTypes.func,\n\n\t\t// Set `onKeyDown` handler.\n\t\t// Can be used in special cases to handle e.g. enter pressed\n\t\tonKeyDown : PropTypes.func,\n\n\t\t// Disables both the <input/> and the <select/>\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t// An error message below the `<input/>`\n\t\terror : PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n\t\t// If this flag is `true` then the `error` is shown.\n\t\t// If this flag is `false` then the `error` is not shown (even if passed).\n\t\tindicateInvalid : PropTypes.bool,\n\n\t\t// Remembers the input and also autofills it\n\t\t// with a previously remembered phone number.\n\t\t// Default value: \"tel\".\n\t\t//\n\t\t// https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n\t\t//\n\t\t// \"So when should you use autocomplete=\"off\"?\n\t\t//  One example is when you've implemented your own version\n\t\t//  of autocomplete for search. Another example is any form field\n\t\t//  where users will input and submit different kinds of information\n\t\t//  where it would not be useful to have the browser remember\n\t\t//  what was submitted previously\".\n\t\t//\n\t\tautoComplete : PropTypes.string.isRequired,\n\n\t\t// Two-letter country code\n\t\t// to be used as the default country\n\t\t// for local (non-international) phone numbers.\n\t\tcountry : PropTypes.string,\n\n\t\t// Is called when the selected country changes\n\t\t// (either by a user manually, or by autoparsing\n\t\t//  an international phone number being input).\n\t\t// This handler does not need to update the `country` property.\n\t\t// It's simply a listener for those who might need that for whatever purpose.\n\t\tonCountryChange : PropTypes.func,\n\n\t\t// Localization dictionary:\n\t\t// `{ International: 'Международный', RU: 'Россия', US: 'США', ... }`\n\t\tdictionary : PropTypes.objectOf(PropTypes.string).isRequired,\n\n\t\t// An optional list of allowed countries\n\t\tcountries : PropTypes.arrayOf(PropTypes.string).isRequired,\n\n\t\t// Custom national flag icons\n\t\tflags : PropTypes.oneOfType\n\t\t([\n\t\t\tPropTypes.bool,\n\t\t\t// Legacy behaviour, will be removed\n\t\t\t// in some future major version upgrade.\n\t\t\tPropTypes.objectOf(PropTypes.element)\n\t\t]),\n\n\t\t// Flag icon component\n\t\tflagComponent : PropTypes.func.isRequired,\n\n\t\t// A base URL path for national flag SVG icons.\n\t\t// By default it uses the ones from `flag-icon-css` github repo.\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t// Whether to use native `<select/>` when expanded\n\t\tnativeExpanded : PropTypes.bool.isRequired,\n\n\t\t// If set to `false`, then country flags will be shown\n\t\t// for all countries in the options list\n\t\t// (not just for selected country).\n\t\tsaveOnIcons : PropTypes.bool.isRequired,\n\n\t\t// Whether to show country `<Select/>`\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t// Whether to add the \"International\" option\n\t\t// to the list of countries.\n\t\tinternational : PropTypes.bool,\n\n\t\t// Custom \"International\" phone number type icon.\n\t\tinternationalIcon : PropTypes.element.isRequired,\n\n\t\t// Should the initially passed phone number `value`\n\t\t// be converted to a national phone number for its country.\n\t\t// (is `false` by default)\n\t\tconvertToNational : PropTypes.bool.isRequired,\n\n\t\t// HTML `tabindex` attribute for the country select\n\t\tselectTabIndex    : PropTypes.number,\n\n\t\t// Defines the height of the dropdown country select list\n\t\tselectMaxItems    : PropTypes.number,\n\n\t\t// (deprecated, use just `tabIndex` instead)\n\t\t// HTML `tabindex` attribute for the phone number `<input/>`\n\t\tinputTabIndex     : PropTypes.number,\n\n\t\t// `aria-label` for the `<Select/>`'s `<button/>`\n\t\tselectAriaLabel : PropTypes.string,\n\n\t\t// `aria-label` for the `<Select/>`'s \"Close\" button\n\t\t// (which is an \"x\" visible in fullscreen mode).\n\t\t// (not yet implemented but is likely to be)\n\t\tselectCloseAriaLabel : PropTypes.string,\n\n\t\t// CSS style object\n\t\tstyle : PropTypes.object,\n\n\t\t// Inline CSS styles for country `<select/>`\n\t\tselectStyle : PropTypes.object,\n\n\t\t// Inline CSS styles for phone number `<input/>`\n\t\tinputStyle : PropTypes.object,\n\n\t\t// Component CSS class\n\t\tclassName : PropTypes.string,\n\n\t\t// `<input/>` CSS class\n\t\t// (both for the phone number `<input/>` and the autocomplete `<input/>`)\n\t\tinputClassName : PropTypes.string,\n\n\t\t// `<Select/>` from `react-responsive-ui` is used by default\n\t\tselectComponent : PropTypes.func.isRequired,\n\n\t\t// `<ReactInput/>` from `input-format` is used by default\n\t\tinputComponent : PropTypes.func.isRequired,\n\n\t\t// `libphonenumber-js` metadata\n\t\tmetadata : PropTypes.shape\n\t\t({\n\t\t\tcountry_phone_code_to_countries : PropTypes.object.isRequired,\n\t\t\tcountries : PropTypes.object.isRequired\n\t\t})\n\t\t.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// Is enabled\n\t\tdisabled: false,\n\n\t\t// Remember (and autofill) as a phone number\n\t\tautoComplete: 'tel',\n\n\t\t// Include all countries by default\n\t\tcountries: all_countries,\n\n\t\t// Flag icon component\n\t\tflagComponent: FlagComponent,\n\n\t\t// By default use the ones from `flag-icon-css` github repo.\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t// Default international icon (globe)\n\t\tinternationalIcon: (\n\t\t\t<div className={ classNames('react-phone-number-input__icon', 'react-phone-number-input__icon--international') }>\n\t\t\t\t<InternationalIcon/>\n\t\t\t</div>\n\t\t),\n\n\t\t// Custom country names\n\t\tdictionary: {},\n\n\t\t// Whether to use native `<select/>` when expanded\n\t\tnativeExpanded: false,\n\n\t\t// Don't show flags for all countries in the options list\n\t\t// (show it just for selected country).\n\t\t// (to save user's traffic because all flags are about 3 MegaBytes)\n\t\tsaveOnIcons: true,\n\n\t\t// Show country `<Select/>` by default\n\t\tshowCountrySelect: true,\n\n\t\t// Don't convert the initially passed phone number `value`\n\t\t// to a national phone number for its country.\n\t\t// The reason is that the newer generation grows up when\n\t\t// there are no stationary phones and therefore everyone inputs\n\t\t// phone numbers with a `+` in their smartphones so local phone numbers\n\t\t// should now be considered obsolete.\n\t\tconvertToNational: false,\n\n\t\t// `<Select/>` from `react-responsive-ui` is used by default\n\t\tselectComponent : Select,\n\n\t\t// `<ReactInput/>` from `input-format` is used by default\n\t\tinputComponent : ReactInput\n\t}\n\n\tstate = {}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst\n\t\t{\n\t\t\tcountries,\n\t\t\tvalue,\n\t\t\tdictionary,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tflags\n\t\t}\n\t\t= this.props\n\n\t\tlet { country } = this.props\n\n\t\t// Normalize `country` code\n\t\tcountry = normalize_country_code(country, dictionary)\n\n\t\t// Autodetect country if value is set\n\t\t// and is international (which it should be)\n\t\tif (value && value[0] === '+')\n\t\t{\n\t\t\t// `country` will be left `undefined` in case of non-detection\n\t\t\tcountry = parse(value).country\n\t\t}\n\n\t\t// If there will be no \"International\" option\n\t\t// then a `country` must be selected.\n\t\tif (!should_add_international_option(this.props) && !country)\n\t\t{\n\t\t\tcountry = countries[0]\n\t\t}\n\n\t\t// Set the currently selected country\n\t\tthis.state.country_code = country\n\n\t\t// If a phone number `value` is passed then format it\n\t\tif (value)\n\t\t{\n\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t// which corresponding to `this.state.value`.\n\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t// needs `this.state.value` recalculation.\n\t\t\tthis.state.value_property = value\n\t\t\t// Set the currently entered `value`.\n\t\t\t// State `value` is either in international plaintext or just plaintext format.\n\t\t\t// (e.g. `+78005553535`, `1234567`)\n\t\t\tthis.state.value = this.get_input_value_depending_on_the_country_selected(value, country)\n\t\t}\n\n\t\t// `<Select/>` options\n\t\tthis.select_options = []\n\n\t\t// Whether custom country names are supplied\n\t\tlet using_custom_country_names = false\n\n\t\t// Add a `<Select/>` option for each country\n\t\tfor (const country_code of countries)\n\t\t{\n\t\t\tif (dictionary[country_code])\n\t\t\t{\n\t\t\t\tusing_custom_country_names = true\n\t\t\t}\n\n\t\t\tthis.select_options.push\n\t\t\t({\n\t\t\t\tvalue : country_code,\n\t\t\t\tlabel : dictionary[country_code] || default_dictionary[country_code],\n\t\t\t\ticon  : get_country_option_icon(country_code, this.props)\n\t\t\t})\n\t\t}\n\n\t\t// Sort the list of countries alphabetically\n\t\t// (if `String.localeCompare` is available).\n\t\t// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\t\t// (Which means: IE >= 11, and does not work in Safari as of May 2017)\n\t\t//\n\t\t// This is only done when custom country names\n\t\t// are supplied via `dictionary` property\n\t\t// because by default all country names are already sorted.\n\t\t//\n\t\tif (using_custom_country_names && String.prototype.localeCompare)\n\t\t{\n\t\t\tthis.select_options.sort((a, b) => a.label.localeCompare(b.label))\n\t\t}\n\n\t\t// Add the \"International\" option to the country list (if suitable)\n\t\tif (should_add_international_option(this.props))\n\t\t{\n\t\t\tthis.select_options.unshift\n\t\t\t({\n\t\t\t\tlabel : dictionary['International'] || default_dictionary['International'],\n\t\t\t\ticon  : flags === false ? undefined : internationalIcon\n\t\t\t})\n\t\t}\n\t}\n\n\t// Determines the text `<input/>` `value`\n\t// depending on `this.props.value` and the country selected.\n\t//\n\t// E.g. when a country is selected and `this.props.value`\n\t// is in international format for this country\n\t// then it can be converted to national format\n\t// (if `convertToNational` is `true`).\n\t//\n\tget_input_value_depending_on_the_country_selected(value, country_code)\n\t{\n\t\tconst { metadata, convertToNational } = this.props\n\n\t\tif (!value)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// If the country code is specified\n\t\tif (country_code)\n\t\t{\n\t\t\t// and the phone is in international format\n\t\t\t// and should convert to national phone number\n\t\t\tif (value[0] === '+' && convertToNational)\n\t\t\t{\n\t\t\t\t// If it's a fully-entered phone number\n\t\t\t\t// that converts into a valid national number for this country\n\t\t\t\t// then the value is set to be that national number.\n\n\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t{\n\t\t\t\t\tconst input_value = format(parsed.phone, country_code, 'National', metadata)\n\t\t\t\t\treturn this.format(input_value, country_code).text\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// The country is not set.\n\t\t// Must be an international phone number then.\n\t\telse if (value[0] !== '+')\n\t\t{\n\t\t\t// The following causes the caret to move the end of the input field\n\t\t\t// but it's unlikely any sane person would like to erase the `+` sign\n\t\t\t// while inputting an international phone number without any country selected.\n\t\t\treturn '+' + value\n\t\t}\n\n\t\treturn value\n\t}\n\n\tset_country_code_value(country_code)\n\t{\n\t\tconst { onCountryChange } = this.props\n\n\t\tif (onCountryChange)\n\t\t{\n\t\t\tonCountryChange(country_code)\n\t\t}\n\n\t\tthis.setState({ country_code })\n\t}\n\n\t// `<select/>` `onChange` handler\n\tset_country = (country_code, focus) =>\n\t{\n\t\tconst { metadata, convertToNational } = this.props\n\n\t\t// Previously selected country\n\t\tconst previous_country_code = this.state.country_code\n\n\t\tthis.set_country_code_value(country_code)\n\n\t\t// Adjust the phone number (`value`)\n\t\t// according to the selected `country_code`\n\n\t\tlet { value } = this.state\n\n\t\t// If the `value` property holds any digits already\n\t\tif (value)\n\t\t{\n\t\t\t// If switching to a country from International or another country\n\t\t\tif (country_code)\n\t\t\t{\n\t\t\t\t// If the phone number was entered in international format.\n\t\t\t\t// The phone number may be incomplete.\n\t\t\t\t// The phone number entered not necessarily starts with\n\t\t\t\t// the previously selected country phone prefix.\n\t\t\t\tif (value[0] === '+')\n\t\t\t\t{\n\t\t\t\t\t// If the international phone number already contains\n\t\t\t\t\t// any country phone code then trim the country phone code part.\n\t\t\t\t\t// (that also could be the newly selected country phone code prefix)\n\t\t\t\t\tvalue = strip_country_phone_code(value, metadata)\n\n\t\t\t\t\t// Else just trim the + sign\n\t\t\t\t\tif (value[0] === '+')\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = value.slice('+'.length)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prepend country phone code part if `convertToNational` is not set\n\t\t\t\t\tif (!convertToNational)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = `+${getPhoneCode(country_code)}${value}`\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If switching to International from a country\n\t\t\tif (previous_country_code && !country_code)\n\t\t\t{\n\t\t\t\t// If no leading `+` sign\n\t\t\t\tif (value[0] !== '+')\n\t\t\t\t{\n\t\t\t\t\t// Format the local phone number as an international one.\n\t\t\t\t\t// The phone number entered not necessarily even starts with\n\t\t\t\t\t// the previously selected country phone prefix.\n\t\t\t\t\t// Even if the phone number belongs to whole another country\n\t\t\t\t\t// it will still be parsed into some national phone number.\n\t\t\t\t\tconst national_number = parse_partial_number(value, previous_country_code, metadata).national_number\n\t\t\t\t\tvalue = format(national_number, previous_country_code, 'International_plaintext', metadata)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the adjusted `<input/>` `value`\n\t\t\t// and update `this.props.value` (in e.164 phone number format)\n\t\t\t// according to the new `this.state.value`.\n\t\t\t// (keep them in sync)\n\t\t\tthis.on_change(value, country_code, true)\n\t\t}\n\t\t// Disabling this feature because if a user selects a country\n\t\t// then it means he doesn't know how to input his phone number\n\t\t// in international format therefore not forcing it\n\t\t// by prepending `+${getPhoneCode(country_code)}`.\n\t\t//\n\t\t// else\n\t\t// {\n\t\t// \t// If the `value` property is `undefined`\n\t\t// \t// (which means the `<input/>` is either empty\n\t\t// \t//  or just the country phone code part is entered)\n\t\t// \t// and `convertToNational` wasn't set to `true`\n\t\t// \t// then populate `<input/>` with the selected country\n\t\t// \t// phone code prefix.\n\t\t// \tif (!convertToNational && country_code)\n\t\t// \t{\n\t\t// \t\t// Update the adjusted `<input/>` `value`\n\t\t// \t\t// and update `this.props.value` (in e.164 phone number format)\n\t\t// \t\t// according to the new `this.state.value`.\n\t\t// \t\t// (keep them in sync)\n\t\t// \t\tthis.on_change(`+${getPhoneCode(country_code)}`, country_code, true)\n\t\t// \t}\n\t\t// }\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tif (focus !== false)\n\t\t{\n\t\t\tsetTimeout(this.focus, 0)\n\t\t}\n\t}\n\n\t// `input-format` `parse` character function\n\t// https://github.com/catamphetamine/input-format\n\tparse_character = (character, value) =>\n\t{\n\t\tconst { countries } = this.props\n\n\t\tif (character === '+')\n\t\t{\n\t\t\t// Only allow a leading `+`\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the \"International\" option is available\n\t\t\t\t// then allow the leading `+` because it's meant to be this way.\n\t\t\t\t//\n\t\t\t\t// Otherwise, the leading `+` will either erase all subsequent digits\n\t\t\t\t// (if they're not appropriate for the selected country)\n\t\t\t\t// or the subsequent digits (if any) will join the `+`\n\t\t\t\t// forming an international phone number. Because a user\n\t\t\t\t// might be comfortable with entering an international phone number\n\t\t\t\t// (i.e. with country code) rather than the local one.\n\t\t\t\t// Therefore such possibility is given.\n\t\t\t\t//\n\t\t\t\treturn character\n\t\t\t}\n\t\t}\n\t\t// For digits.\n\t\t// Converts wide-ascii and arabic-indic numerals to European numerals.\n\t\t// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n\t\telse if (DIGITS[character])\n\t\t{\n\t\t\tconst { metadata } = this.props\n\t\t\tconst { country_code } = this.state\n\n\t\t\t// If the \"International\" option is not available\n\t\t\t// and if the value has a leading `+`\n\t\t\t// then it means that the phone number being entered\n\t\t\t// is an international one, so only allow the country phone code\n\t\t\t// for the selected country to be entered.\n\n\t\t\tif (!should_add_international_option(this.props) && value && value[0] === '+')\n\t\t\t{\n\t\t\t\tif (!could_phone_number_belong_to_country(value + DIGITS[character], country_code, metadata))\n\t\t\t\t{\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn DIGITS[character]\n\t\t}\n\t}\n\n\t// `input-format` `format` function\n\t// https://github.com/catamphetamine/input-format\n\tformat = (input_text, country_code = this.state.country_code) =>\n\t{\n\t\tconst { metadata } = this.props\n\n\t\t// \"As you type\" formatter\n\t\tconst formatter = new as_you_type(country_code, metadata)\n\n\t\t// Is used to check if a country code can already be derived\n\t\tthis.formatter = formatter\n\n\t\t// Format phone number\n\t\tconst text = formatter.input(input_text)\n\n\t\treturn { text, template: formatter.template }\n\t}\n\n\t// Returns `true` if the country is available in the list\n\tis_selectable_country = (country_code) =>\n\t{\n\t\tconst { countries } = this.props\n\n\t\tfor (const available_country_code of countries)\n\t\t{\n\t\t\tif (available_country_code === country_code)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\t// Can be called externally\n\tfocus = () =>\n\t{\n\t\tReactDOM.findDOMNode(this.input).focus()\n\t}\n\n\t// `<input/>` `onKeyDown` handler\n\ton_key_down = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Expand country `<select/>`` on \"Down arrow\" key press\n\t\tif (event.keyCode === 40)\n\t\t{\n\t\t\tthis.select.toggle()\n\t\t}\n\n\t\tif (onKeyDown)\n\t\t{\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `this.props.value` (in e.164 phone number format)\n\t// according to the new `this.state.value`.\n\t// (keeps them in sync)\n\ton_change = (value, country_code = this.state.country_code, changed_country = false) =>\n\t{\n\t\tconst { metadata, onChange } = this.props\n\n\t\t// If the `<input/>` is empty then just exit\n\t\tif (!value)\n\t\t{\n\t\t\treturn this.setState\n\t\t\t({\n\t\t\t\t// State `value` is the parsed input value\n\t\t\t\t// (e.g. `+78005553535`, `1234567`).\n\t\t\t\t// This is not `this.props.value`\n\t\t\t\t// i.e. it's not neccessarily an international plaintext phone number,\n\t\t\t\t// it's just the `value` parsed by `input-format`.\n\t\t\t\tvalue,\n\t\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t\t// which corresponding to `this.state.value`.\n\t\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t\t// needs `this.state.value` recalculation.\n\t\t\t\tvalue_property: value\n\t\t\t},\n\t\t\t// Write the new `this.props.value`.\n\t\t\t() => onChange(value))\n\t\t}\n\n\t\t// For international phone numbers\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\t// If an international phone number is being erased up to the first `+` sign\n\t\t\t// or if an international phone number is just starting (with a `+` sign)\n\t\t\t// then unset the current country because it's clear that a user intends to change it.\n\t\t\tif (value.length === 1)\n\t\t\t{\n\t\t\t\t// If \"International\" country option has not been disabled\n\t\t\t\t// then reset the currently selected country.\n\t\t\t\tif (!changed_country && should_add_international_option(this.props))\n\t\t\t\t{\n\t\t\t\t\tcountry_code = undefined\n\t\t\t\t\tthis.set_country_code_value(country_code)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// If a phone number is being input as an international one\n\t\t\t\t// and the country code can already be derived,\n\t\t\t\t// then switch the country.\n\t\t\t\t// (`001` is a special \"non-geograpical entity\" code in `libphonenumber` library)\n\t\t\t\tif (!changed_country &&\n\t\t\t\t\tthis.formatter.country &&\n\t\t\t\t\tthis.formatter.country !== '001' &&\n\t\t\t\t\tthis.is_selectable_country(this.formatter.country))\n\t\t\t\t{\n\t\t\t\t\tcountry_code = this.formatter.country\n\t\t\t\t\tthis.set_country_code_value(country_code)\n\t\t\t\t}\n\t\t\t\t// If \"International\" country option has not been disabled\n\t\t\t\t// and the international phone number entered doesn't correspond\n\t\t\t\t// to the currently selected country then reset the currently selected country.\n\t\t\t\telse if (!changed_country &&\n\t\t\t\t\tshould_add_international_option(this.props) &&\n\t\t\t\t\tcountry_code &&\n\t\t\t\t\tvalue.indexOf(getPhoneCode(country_code) !== '+'.length))\n\t\t\t\t{\n\t\t\t\t\tcountry_code = undefined\n\t\t\t\t\tthis.set_country_code_value(country_code)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If \"International\" mode is selected\n\t\t// and the `value` doesn't start with a + sign,\n\t\t// then prepend it to the `value`.\n\t\telse if (!country_code)\n\t\t{\n\t\t\tvalue = '+' + value\n\t\t}\n\n\t\t// `this.state.value_property` is the `this.props.value`\n\t\t// which corresponding to `this.state.value`.\n\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t// against `newProps.value` to find out if the new `value` property\n\t\t// needs `this.state.value` recalculation.\n\t\tlet value_property\n\n\t\t// `value` equal to `+` makes no sense\n\t\tif (value === '+')\n\t\t{\n\t\t\tvalue_property = undefined\n\t\t}\n\t\t// If a phone number is in international format then check\n\t\t// that the phone number entered belongs to the selected country.\n\t\telse if (country_code && value[0] === '+' && !(value.indexOf(`+${getPhoneCode(country_code)}`) === 0 && value.length > `+${getPhoneCode(country_code)}`.length))\n\t\t{\n\t\t\tvalue_property = undefined\n\t\t}\n\t\t// Should be a most-probably-valid phone number\n\t\telse\n\t\t{\n\t\t\t// Convert `value` to E.164 phone number format\n\t\t\tvalue_property = e164(value, country_code, metadata)\n\t\t}\n\n\t\tthis.setState\n\t\t({\n\t\t\t// State `value` is the parsed input value\n\t\t\t// (e.g. `+78005553535`, `1234567`).\n\t\t\t// This is not `this.props.value`\n\t\t\t// i.e. it's not neccessarily an international plaintext phone number,\n\t\t\t// it's just the `value` parsed by `input-format`.\n\t\t\tvalue,\n\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t// which corresponding to `this.state.value`.\n\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t// needs `this.state.value` recalculation.\n\t\t\tvalue_property\n\t\t},\n\t\t// Write the new `this.props.value`.\n\t\t() => onChange(value_property))\n\t}\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t// not the formatted one.\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component passes this `onBlur` property further to\n\t// `input-format`'s `<ReactInput/>` which then modifies this `onBlur` handler\n\t// to return the correct parsed `value` so that it all works with `redux-form`.\n\ton_blur = (event) =>\n\t{\n\t\tconst { onBlur } = this.props\n\t\tconst { value_property } = this.state\n\n\t\tif (!onBlur)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tconst _event =\n\t\t{\n\t\t\t...event,\n\t\t\ttarget:\n\t\t\t{\n\t\t\t\t...event.target,\n\t\t\t\tvalue: value_property\n\t\t\t}\n\t\t}\n\n\t\t// For `redux-form` event detection.\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t_event.stopPropagation = event.stopPropagation\n\t\t_event.preventDefault  = event.preventDefault\n\n\t\treturn onBlur(_event)\n\t}\n\n\t// When country `<select/>` is toggled\n\tcountry_select_toggled = (is_shown) =>\n\t{\n\t\tthis.setState({ country_select_is_shown: is_shown })\n\t}\n\n\t// Focuses the `<input/>` field\n\t// on tab out of the country `<select/>`\n\ton_country_select_tab_out = (event) =>\n\t{\n\t\tevent.preventDefault()\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tsetTimeout(this.focus, 0)\n\t}\n\n\t// Can a user change the default country or not.\n\tcan_change_country()\n\t{\n\t\tconst { countries } = this.props\n\n\t\t// If `countries` is empty,\n\t\t// then only \"International\" option is available,\n\t\t// so can't switch it.\n\t\t//\n\t\t// If `countries` is a single allowed country,\n\t\t// then cant's switch it.\n\t\t//\n\t\treturn countries.length > 1\n\t}\n\n\t// Listen for default country property:\n\t// if it is set after the page loads\n\t// and the user hasn't selected a country yet\n\t// then select the default country.\n\tcomponentWillReceiveProps(new_props)\n\t{\n\t\tconst { countries, value, dictionary } = this.props\n\n\t\t// Normalize `country` codes\n\t\tlet country     = normalize_country_code(this.props.country, dictionary)\n\t\tlet new_country = normalize_country_code(new_props.country, dictionary)\n\n\t\t// If the default country changed\n\t\t// (e.g. in case of IP detection)\n\t\tif (new_country !== country)\n\t\t{\n\t\t\t// If the phone number input field is currently empty\n\t\t\t// (e.g. not touched yet) then change the selected `country`\n\t\t\t// to the newly passed one (e.g. as a result of a GeoIP query)\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the passed `country` allowed then update it\n\t\t\t\tif (countries.indexOf(new_country) !== -1)\n\t\t\t\t{\n\t\t\t\t\t// Set the new `country`\n\t\t\t\t\tthis.set_country(new_country, false)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// This code is executed:\n\t\t// * after `this.props.onChange(value)` is called\n\t\t// * if the `value` was externally set (e.g. cleared)\n\t\tif (new_props.value !== value)\n\t\t{\n\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t// which corresponding to `this.state.value`.\n\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t// needs `this.state.value` recalculation.\n\t\t\t// This is an optimization, it's like `shouldComponentUpdate()`.\n\t\t\t// This is supposed to save some CPU cycles, maybe not much, I didn't check.\n\t\t\t// Or maybe there was some other reason for this I don't remember now.\n\t\t\tif (new_props.value !== this.state.value_property)\n\t\t\t{\n\t\t\t\t// Update the `value` because it was externally set\n\n\t\t\t\t// Country code gets updated too\n\t\t\t\tlet country_code = this.state.country_code\n\n\t\t\t\t// Autodetect country if `value` is set\n\t\t\t\t// and is international (which it should be)\n\t\t\t\tif (new_props.value && new_props.value[0] === '+')\n\t\t\t\t{\n\t\t\t\t\t// `parse().country` will be `undefined` in case of non-detection\n\t\t\t\t\tcountry_code = parse(new_props.value).country || country_code\n\t\t\t\t}\n\n\t\t\t\tthis.setState\n\t\t\t\t({\n\t\t\t\t\tcountry_code,\n\t\t\t\t\tvalue: this.get_input_value_depending_on_the_country_selected(new_props.value, country_code),\n\t\t\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t\t\t// which corresponding to `this.state.value`.\n\t\t\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t\t\t// needs `this.state.value` recalculation.\n\t\t\t\t\tvalue_property: new_props.value\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tstore_select_instance = (instance) =>\n\t{\n\t\tthis.select = instance\n\t}\n\n\tstore_input_instance = (instance) =>\n\t{\n\t\tthis.input = instance\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tsaveOnIcons,\n\t\t\tshowCountrySelect,\n\t\t\tnativeExpanded,\n\t\t\tdisabled,\n\t\t\tautoComplete,\n\t\t\tselectTabIndex,\n\t\t\tselectMaxItems,\n\t\t\tselectAriaLabel,\n\t\t\tselectCloseAriaLabel,\n\t\t\tinputTabIndex,\n\t\t\tstyle,\n\t\t\tselectStyle,\n\t\t\tinputStyle,\n\t\t\tclassName,\n\t\t\tinputClassName,\n\n\t\t\terror,\n\t\t\tindicateInvalid,\n\n\t\t\tselectComponent : SelectComponent,\n\t\t\tinputComponent  : InputComponent,\n\n\t\t\t// Extract `input_props` via \"object rest spread\":\n\t\t\tdictionary,\n\t\t\tcountries,\n\t\t\tcountry,\n\t\t\tonCountryChange,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagsPath,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tconvertToNational,\n\t\t\tmetadata,\n\t\t\t...input_props\n\t\t}\n\t\t= this.props\n\n\t\t// `inputTabIndex` is deprecated, use just `tabIndex` instead\n\t\tif (inputTabIndex)\n\t\t{\n\t\t\tinput_props.tabIndex = inputTabIndex\n\t\t}\n\n\t\tconst\n\t\t{\n\t\t\tvalue,\n\t\t\tcountry_code,\n\t\t\tcountry_select_is_shown\n\t\t}\n\t\t= this.state\n\n\t\t// `type=\"tel\"` was reported to have issues with\n\t\t// Samsung keyboards caret position on Android OS.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/59\n\t\t// One may choose to pass `type=\"text\"` in those cases\n\t\t// but this will result in a non-digital input keyboard.\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={ style }\n\t\t\t\tclassName={ classNames('react-phone-number-input',\n\t\t\t\t{\n\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\n\t\t\t\t},\n\t\t\t\tclassName) }>\n\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\n\t\t\t\t<div className=\"react-phone-number-input__row\">\n\n\t\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t\t{ showCountrySelect && this.can_change_country() &&\n\t\t\t\t\t\t<SelectComponent\n\t\t\t\t\t\t\tref={ this.store_select_instance }\n\t\t\t\t\t\t\tvalue={ country_code }\n\t\t\t\t\t\t\toptions={ this.select_options }\n\t\t\t\t\t\t\tonChange={ this.set_country }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\tonToggle={ this.country_select_toggled }\n\t\t\t\t\t\t\tonTabOut={ this.on_country_select_tab_out }\n\t\t\t\t\t\t\tnativeExpanded={ nativeExpanded }\n\t\t\t\t\t\t\tautocomplete\n\t\t\t\t\t\t\tautocompleteShowAll\n\t\t\t\t\t\t\tmaxItems={ selectMaxItems }\n\t\t\t\t\t\t\tconcise\n\t\t\t\t\t\t\ttabIndex={ selectTabIndex }\n\t\t\t\t\t\t\tfocusUponSelection={ false }\n\t\t\t\t\t\t\tsaveOnIcons={ saveOnIcons }\n\t\t\t\t\t\t\tname={ input_props.name ? `${input_props.name}__country` : undefined }\n\t\t\t\t\t\t\tariaLabel={ selectAriaLabel }\n\t\t\t\t\t\t\tcloseAriaLabel={ selectCloseAriaLabel }\n\t\t\t\t\t\t\tstyle={ selectStyle }\n\t\t\t\t\t\t\tclassName={ classNames('react-phone-number-input__country',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'react-phone-number-input__country--native-expanded' : nativeExpanded\n\t\t\t\t\t\t\t}) }\n\t\t\t\t\t\t\tinputClassName={ inputClassName }/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t\t{ !country_select_is_shown &&\n\t\t\t\t\t\t<InputComponent\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\t{ ...input_props }\n\t\t\t\t\t\t\tref={ this.store_input_instance }\n\t\t\t\t\t\t\tvalue={ value }\n\t\t\t\t\t\t\tonChange={ this.on_change }\n\t\t\t\t\t\t\tonBlur={ this.on_blur }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\n\t\t\t\t\t\t\tparse={ this.parse_character }\n\t\t\t\t\t\t\tformat={ this.format }\n\t\t\t\t\t\t\tonKeyDown={ this.on_key_down }\n\t\t\t\t\t\t\tstyle={ inputStyle }\n\t\t\t\t\t\t\tclassName={ classNames\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t'rrui__input',\n\t\t\t\t\t\t\t\t'rrui__input-element',\n\t\t\t\t\t\t\t\t'rrui__input-field',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'rrui__input-field--invalid'  : error && indicateInvalid,\n\t\t\t\t\t\t\t\t\t'rrui__input-field--disabled' : disabled\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\n\t\t\t\t\t\t\t\tinputClassName\n\t\t\t\t\t\t\t) }/>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{/* Error message */}\n\t\t\t\t{ error && indicateInvalid &&\n\t\t\t\t\t<div className={ classNames('rrui__input-error', 'react-phone-number-input__error') }>\n\t\t\t\t\t\t{ error }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Parses a partially entered phone number\n// and returns the national number so far.\n// Not using `libphonenumber-js`'s `parse`\n// function here because `parse` only works\n// when the number is fully entered,\n// and this one is for partially entered number.\nfunction parse_partial_number(value, country_code, metadata)\n{\n\t// \"As you type\" formatter\n\tconst formatter = new as_you_type(country_code, metadata)\n\n\t// Input partially entered phone number\n\tformatter.input(value)\n\n\t// Return the parsed partial phone number\n\t// (has `.national_number`, `.country`, etc)\n\treturn formatter\n}\n\n// Converts `value` to E.164 phone number format\nfunction e164(value, country_code, metadata)\n{\n\tif (!value)\n\t{\n\t\treturn undefined\n\t}\n\n\t// If the phone number is being input in an international format\n\tif (value[0] === '+')\n\t{\n\t\t// If it's just the `+` sign\n\t\tif (value.length === 1)\n\t\t{\n\t\t\treturn undefined\n\t\t}\n\n\t\t// If there are some digits, the `value` is returned as is\n\t\treturn value\n\t}\n\n\t// For non-international phone number a country code is required\n\tif (!country_code)\n\t{\n\t\treturn undefined\n\t}\n\n\t// The phone number is being input in a country-specific format\n\n\tconst partial_national_number = parse_partial_number(value, country_code).national_number\n\n\tif (!partial_national_number)\n\t{\n\t\treturn undefined\n\t}\n\n\t// The value is converted to international plaintext\n\treturn format(partial_national_number, country_code, 'International_plaintext', metadata)\n}\n\n// Gets country flag element by country code\nfunction get_country_option_icon(countryCode, { flags, flagsPath, flagComponent })\n{\n\tif (flags === false)\n\t{\n\t\treturn undefined\n\t}\n\n\tif (flags && flags[countryCode])\n\t{\n\t\treturn flags[countryCode]\n\t}\n\n\treturn React.createElement(flagComponent, { countryCode, flagsPath })\n}\n\n// Whether to add the \"International\" option to the list of countries\nfunction should_add_international_option(properties)\n{\n\tconst { countries, international } = properties\n\n\t// If this behaviour is explicitly set, then do as it says.\n\tif (international !== undefined)\n\t{\n\t\treturn international\n\t}\n\n\t// If `countries` is empty,\n\t// then only \"International\" option is available, so add it.\n\tif (countries.length === 0)\n\t{\n\t\treturn true\n\t}\n\n\t// If `countries` is a single allowed country,\n\t// then don't add the \"International\" option\n\t// because it would make no sense.\n\tif (countries.length === 1)\n\t{\n\t\treturn false\n\t}\n\n\t// Show the \"International\" option by default\n\treturn true\n}\n\n// Is it possible that the partially entered  phone number belongs to the given country\nfunction could_phone_number_belong_to_country(phone_number, country_code, metadata)\n{\n\t// Strip the leading `+`\n\tconst phone_number_digits = phone_number.slice('+'.length)\n\n\tfor (const country_phone_code of Object.keys(metadata.country_phone_code_to_countries))\n\t{\n\t\tconst possible_country_phone_code = phone_number_digits.substring(0, country_phone_code.length)\n\t\tif (country_phone_code.indexOf(possible_country_phone_code) === 0)\n\t\t{\n\t\t\t// This country phone code is possible.\n\t\t\t// Does the given country correspond to this country phone code.\n\t\t\tif (metadata.country_phone_code_to_countries[country_phone_code].indexOf(country_code) >= 0)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n}\n\n// If a formatted phone number is an international one\n// then it strips the `+${country_phone_code}` prefix from the formatted number.\nfunction strip_country_phone_code(formatted_number, metadata)\n{\n\tif (!formatted_number || formatted_number[0] !== '+' || formatted_number === '+')\n\t{\n\t\treturn formatted_number\n\t}\n\n\tfor (const country_phone_code of Object.keys(metadata.country_phone_code_to_countries))\n\t{\n\t\tif (formatted_number.indexOf(country_phone_code) === '+'.length)\n\t\t{\n\t\t\treturn formatted_number.slice('+'.length + country_phone_code.length).trim()\n\t\t}\n\t}\n\n\treturn formatted_number\n}\n\n// Validates country code\nfunction normalize_country_code(country, dictionary)\n{\n\t// Normalize `country` if it's an empty string\n\tif (country === '')\n\t{\n\t\tcountry = undefined\n\t}\n\n\t// No country is selected (\"International\")\n\tif (country === undefined || country === null)\n\t{\n\t\treturn country\n\t}\n\n\t// Check that `country` code exists\n\tif (dictionary[country] || default_dictionary[country])\n\t{\n\t\treturn country\n\t}\n\n\tthrow new Error(`Unknown country: \"${country}\"`)\n}\n"]}